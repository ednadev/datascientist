다음주 월요일 : 컬렉션
화, 수 -> 휴일 (무조건 집에서 자바 끝내기)
목요일 - 개인적으로 작업.. 거의 자바 끝? 자바 총정리

순서를 가지고 있는 것들은 내부적으로 index로 관리한다.
field로 index를 뽑아서 쓴다. 

숙제할 때 주석 /** .. */ 달기.. 

--------------------------------

static 키워드

(필드, 로컬, static 변수 -> 변수는 3가지!
자바에서는 class 변수라고 많이 쓰인다.

필드와 static이 어떻게 다른지를 알아야한다.)

1. static한 멤버는 객체 생성 없이 사용할 수 있다. (객체 생성 -> 메모리에 올린다. static은 미리 메모리에 올라가 있다는 것!)
2. static한 멤버는 객체 생성 이전에 미리 메모리 올라가 있다.
   class file loader 되는 시점에 올라간다... (실행되는 시점)
   ex)Math.random(), main(), Integer.parseInt(), System.out.print() -> out은 필드! out이 static


   out ---> s(tatic) field
   System s = new System();
   s.out 
-----------------------------
System.out

3. static한 멤버는 생성된 객체들이 모두 공유한다.!!!!
4. static은 final과 함께 겨의 사용된다.
5. 싱글톤 패턴시 필수적으로 사용!!!!



Book에 해당되는 Magazine

Magazine이 Book을 상속받는다.
어차피 둘다 VO 객체 -> Domain Object

VO를 핸들링하는 클래스가 BookMgr
핸들링의 기본은 CRUD : addBook(), delBook(), searchBook()
기능 말고 선언해야 하는 건 배열! BookMgr에서 선언할 때 배열을 꼭 만들어줘야 한다

1...* : 1에서 여러개까지 다룰 수 있다는 뜻! .. 북 매니저에 배열을 관리하고 있다는 건 책들을 관리한다는 뜻


상속은 필드가 공통적! 멤버를 공유해줌.. 부모가 접근하는..?
인터페이스는 기능뿐이다! 필드가 없음.. 인터페이스 자체가 상속
밑에서 위로 가는 건 추상화, generalization.. 
부모 모듈을 하나 만든다면

<<interface>>
부모 : Flyer -> 공통 기능만 추출! fly(), land(), take_off()
<<class>>
Bird : lay_eggs() / AirPlane / SuperMan

일반적인 모듈이면 호출이 아니라 구현부가 없는 것.. 메소드 정의가 어중간한 걸 void fly();, void land();, void take_off();
구현부가 없는 걸 '메소드의 Template' -- 지정만 해주는 것, 구체적인 기능은 없음..
구현부가 없는 메소드 = "추상메소드" (abstract method)
 --> public abstract가 무조건 붙음! ex) public abstract void fly();
template으로만 만들어진 걸 인터페이스라고 함!

인터페이스도 클래스와 달리 기능의 template만 이루어짐. field가 있으면 안된다.

클래스는 인터페이스를 구현해야한다.
인터페이스가 부모! 다만 상속이 아닌 implement한다.
* 부모(인터페이스)의 추상 메소드를 자식 클래스는 전부다 구현

달라지는 건 하나! 기능이 달라진다~~

인터페이스의 용도? 기능의 template을 제공하는 것
자식은 받아먹어서 구현을 해야한다. 각각 다르게 구현!

인터페이스는 완벽한 template만 구현하는 것이라고 보면 된다.

클래스끼리는 상속이라고 하는데, 인터페이스와 클래스는 왜 구현이라고 할까?
--> 

class -- (extends) --> class
class -- (implements) --> interface

<상속이랑 인터페이스 차이 알아야 함>
자식은 부모보다 더 많아짐.. 확장~~ 이런 부분이 수직적인 상속 관계
인터페이스는 틀만 준거라서 부모가 가진 틀을 자기자신한테 맞게 구현하는 것

인터페이스든, 클래스든 슈퍼급..부모!

object와 가깝다는 이야기는 추상화가 심하다는 것.. 클래스는 추상화 x, 인터페이스는 완벽한 추상화!
부모 클래스들보다더 더 위에 있는 것이 인터페이스

부모가 가진 모든 걸 자식에게 물려준다. 클래스는 추상이 있으면 안된다. 클래스가 메소드로만 있어도 된다 (service)
완벽한 추상화가 인터페이스, 구멍이 하나도 없어야 하는 건 클래스.. 클래스는 추상이 1도 없어야 한다

오버라이딩.. 받아서 구현하므로..
물려준 선언부만 똑같다.

여러 부모를 상속받을 수 있다. 인터페이스는 인터페이스만 상속받을 수 있다. 완벽한 추상화여야 하기 때문에 class는 안됨

인터페이스는 타입으로 설정할 수 있다. 이유는 부모니까
부모의 역할은 타입! Book 타입으로 Magazine, Novel 등등...
부모는 핸들링하는 객체가 아닌 객체를 담아내는 타입으로 사용한다.


----------

개발자 <-- 사용
SunMicroSystems : 인터페이스 역할
구현 --> Vendor사 (Oracle, MySQL, MSSQL)


인터페이스 = 규약
가장 표준화된 규약.. 


// Workshop 5
Interface : MovieMgr
Class : MovieMgrImpl
