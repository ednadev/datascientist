서브쿼리(inner query)가 메인쿼리(outer query) 보다 먼저 돌아가야 한다.
서브쿼리는 괄호로 둘러싸야 한다.
서브쿼리는 비교 연산자의 오른쪽에 있어야 한다.
서브쿼리에 ORDER BY 절을 사용할 필요가 없다. (이유 : 어차피 메인쿼리에서 돌아가므로 정렬이 의미없다)
단일 행 서브쿼리에는 단일 행 연산자(>, <, =, !=)를 사용한다.
다중 행 서브쿼리에는 다중 행 연산자(in)를 사용한다.

-- 다중 행 연산자 : in, any 정도만 알면 된다.


-----------

VO (Model) - DAO (비지니스 로직) - View (Test) - DB


프로젝트 

착수..

분석
사용자 입장에서 소프트웨어 기능을 살펴보는 단계

설계
시나리오
요구사항명세서 SRS
UseCase Diagram --- STAR UML | Amateras(이클립스 플러그인)
(Class Diagram, 화면설계, DB Modeling)

구현

테스트 (단위 테스트)


https://offbyone.tistory.com/182


AmaterasUML - Usecase Diagram
확장자 .ucd

Actor - 사용자
Use Case - Actor가 하는 기능

System - 

Relation.. 




세탁기-----소프트웨어

고객, 사용자

전원을 킨다, 전원을 끈다
건조하다
헹군다
탈수한다
세제넣는다
스팀하다, 세탁하다, 이불빨래한다..., 울빨래
물이 빠진다. 물온도 조절


관계는 Relation.. Use Case 사이에서 쓴다

include는 순서가 아니다..
온도조절이나 세재를 넣는다 순서 상관 없음

Actor의 위치는 System 바운더리 바깥에 있어야 한다.
Actor가 시스템은 아니니까

include : 화살표 방향이 있는 부분이 선행작업
extend : 기능의 세분화
generalization : Actor에서만 사용

Actor와 Use Case 관계는 Relation

--> 포트폴리오 만들 때 이미지로 추출







쇼핑몰 사이트...고객이 행할 수 있는 기능
회원가입
로그인
회원탈퇴
정보수정

검색
모든회원 검색
특정회원 검색
자신의 정보검색

---> ucd

Entity : 회원, 관리자 -- Entity를 추출하는 단계가 개념적 모델링 단계
Entity의 속성을 추가하는 단계가 논리적 모델링 단계
물리적 모델링 단계에서 DB화 시킨다.

Entity는 테이블 하나와 맞먹는다..
워크벤치에서 New Model
add diagram

Database - Forward Engineer

1) 사용자적 입장에서 기능을 검토... Use Case Diagram
2) 엔터티 추출 ... DB Modeling....물리적인 테이블 생성(제약관계)
3) vo작성

DB에서는 _, VO에서는 Camel Case

FrontUI (View) - VO - DAO - DB

4) DAO 작성 (클라이언트 하나당 요청이 들어올 때마다 메소드가 하나씩 요청.. Singleton)
   --> 싱글톤 | INTERFACE
   --> 공통적인 로직 | 가변적인 로직
  


내일 수업 : 서브쿼리 workshop, 조인, 분석함수
