오늘 수업.. 예외처리 (여기까지가 OOP)

웹까지..기초 과정 끝내고 (7월 중순까지)
파이썬 + 빅데이터, 머신
자바 고급 기술 : 스프링부트 + 뷰 // Elastic Search
파이널 프로젝트 (9월)

..
수업 시작!

[JAVA API] 객체를 담고 있는 컨테이너 -> 컨테이너는 java.util에 있다
Set : unique - no duplicate (중복 X)
	- Method Summary : CRUD 생각 - add, remove, iterator (가져오기)
		- 수정은? set의 저장법의 특징은 unique
		  키가 덮어 쓰는지 아닌지 확인하기. 오버라이트 된다는 건 그게 업데이트!
		- isEmpty, size, toArray
	- index가 없다. 순서가 없다는 것
List : ordered
	- Method Summary (function이 많음 - 자주 쓰임)
		- add (index 포함)
		- remove(index - 삭제가 된 객체가 리턴, 객체는 boolean으로 리턴)
		- get 
		- (Update) set : 핸들링 하는데 쓰이진 않음
		- toArray, iterator, clear, isEmpty,...
Map : Collection의 서브가 아님. 독자적임
	- Method Summary
		- put
		- remove : index, 객체 안들어감 -> key만
		- get : key로 받아옴
		- put : 수정하는 게 따로 없으면 덮어 쓰면 된다! key가 없으면 추가, key가 있을 때는 업데이트가 된다.
		- containsKey : 반복문 돌릴필요 없이 키를 찾을 수 있다.
		- values : vaule만 가져옴
		- isEmpty, keySet, get은 키를 알때 쓰는 것
		- key를 알때는 get을 쓰면 되지만, key를 모를 때는 keySet부터

-- 예외처리 (p.487 - 490)
Exception
프로그래밍을 실행하는 도중에 예기치 않게 발생하는 일종의 사건
자바는 이러한 버그조차도 객체로 핸들링한다
예외를 처리하는 키워드
1) try~catch
2) throws
------------
3) finally, throw
---------------------------------------------------------
예외는 메소드 안에서 줄단위로 발생한다!!
예외 처리하는 명시적인 방법
1) try~catch (예외가 발생한다는 것은 버그 객체가 생성된다는 것! catch! 잡아서 없애기)
try{
      // 예외 발생 가능성 있는 코드--------A, B
} catch(B a) {
      // 위에서 발생한 예외 객체로 잘 잡았을때의 코드
}

- while문안에서 발생하면 돌아가는데.. 특별한 라인을 만났을 때 터짐
- 정상적으로 돌아가고 비정상적인 부분에서만 발생하고 이 부분을 해결해야 한다
- ArrayIndexOutOfBoundsException 객체가 생김
- 런타임 계열은 명시적으로 해결할 필요 없음. 코드를 수정하면 됨
- ArithmeticException : 부모에는 0이 올 수 없다
- NegativeArraySizeException : 
- NumberFormatException : 숫자를 넣어야 하는데 문자를 넣었을 때
--> 컴파일 인식은 하지만 .. 코드 고칠 것!

unhandled exception은 무조건 예외처리 하라는 얘기
컴파일 exception은 안잡으면 코드 못 돌림 -> 해결해야 실행 가능

API 확인
java.io.. fileReader -> 생성자 확인
원래부터 Throws.. 예외 처리 하게 던짐
예외처리하게 한 이유? 좀 더 안정적으로 사용하게끔 만듬
이미 만들때부터 throws FileNotFoundException이 있음 -> 이미 JVM이 객체로 만들어서 던진거
JVM이 만든 폭탄이 예외가 발생한 것
지가 만든 것이기 때문에 지가 만드는 것! 

-----
Exception
    |
IOException----read()
    |
FileNotFoundException----FileReader();

--> 예외처리 잡으려면 FileNotFoundException부터..


read(), close().. 이미 호출했을 때 throws IOException 던짐


.. [API]
java.lang - Exception
NamingException, SQLException, XMLParseException

UserException은 Runtime 계열.. 실행할 때 처리하기 때문에 컴파일 예외와 다름

컴파일 계열은 미리 예외를 잡았기 때문에 실행할 때 에러가 나지 않는다

정리하자면, 컴파일은 예외 잡아주고 런타임은 사용자 정의 예외만! 나머지 예외는 코드 수정
사용자 정의에서는 finally 쓰지 않는다. 컴파일에서 file 같은 경우만 나오기에 쓸 일이 없다.



자바 Project 1.
=== Encore Academy Project ===
1. 컨셉 : 핵심적으로 다루고자 하는 이슈 하나를 정하기  -- 기능
2. Entity(Domain Object)를 추출   -> 기능 추출
3. Association Entity --> 클래스 다이어그램.. 손으로 그려서..관계만 (필드만 적든가, 박스끼리 연결된 것만 적기! 상속이나 헤징.. 클래스단위로-기능 적을 필요 X)
	-- 사진 찍어서 보내기!
4. method identifier : 인터페이스 하나 만들어서 캡처