* 어제 내용 복습
Object 객체 - 책, 노트북, 개발자 등등 실제 세계에 존재하는 모든 것, 동일한 건 없음
어떤 성질을 넣을지는 분석에 따라서 - 성질(Field)과 기능(Method)

객체 생성 - new = (Heap) 메모리에 올린다 = 식구들이 올라간다
각각의 이름, 월급, 보너스 등을 인스턴스라고 한다

클래스는 값을 넣을 프레임
인스턴스 : 메모리에 올라가서 내가 사용할 수 있는 상태의 객체

--> 오브젝트, 클래스, 인스턴스 (p.147 참고!)


* 생성자
Emcapsulation

Real World : 라운드T, 점퍼, 반팔T
-> Software World : Clothing or Shirt (클래스 = 타입)
    - Shirt [ Field]
    	longSleeved : boolean
	brandName : String
	color : char

Shirt 라운드T = new Shirt();
Shirt 점퍼 = new Shirt();
Shirt 반팔T = new Shirt();

Clothing 추상화
Shirt 구체화

Notebook, Animal 등으로는 안됨


EncoreGreet eg = new EncoreGreet();
- EncoreGreet : Type
- EncoreGreet() : Constructor - 생성자 (메소드가 아니지만 하는 일은 메소드)


Constructor
: 객체가 생성될'때마다' 호출되는 것
명시적 생성자가 하는 일은 Field Initialization!
클래스에 아무런 생성자가 없다면 (컴파일러가) 기본 생성자는 넣어준다.


C : 절차지향 (설계 필요 없음, 처음 진입장벽은 낮다. 그러나 중간에 수정하면 전체 다 수정한다고 생각하면 됨 - 유지보수 비용이 많이 든다)
Java : 객체지향 (니즈가 변경되면 그 부분만 변경 가능 -> 유지보수하기 쉽다)

클래스에서 제일 중요한 건 필드추출!

MyDate 클래스
[Field]
month
day

1. 필드를 추출했으면
2. 값을 주입해야 한다. -> Setter(), 생성자


Emcapsulation : 캡슐화시키다 - 같은 클래스끼리만 접근 가능
- 다른 클래스에서 접근하지 못하도록 하는 것
- 



빌드패스 오류 해결 : 
 -> Window - Preferences : Installed JREs : jre로 안되면 jdk로

상속 (Vertical) / 가져오는 건 (Horizontal)

 **
 NoteBook
 - brandName : String
