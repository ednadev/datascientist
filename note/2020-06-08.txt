Cookie / HttpSession
Data Source / JNDI Service
+
ServletContext : Global한 초기화
==============================================================
Session을 제대로 알려면 Cookie를 알아야 한다
Data Source = Connection Pooling .. JNDI Service를 이용해야 한다
현재 MVC 패턴에서 Front Controller 패턴으로 바꾼다.. 여기서 Factory Method 패턴까지 변경

HttpSession API
Provides a way to identify a user across more than one page request or visit to a Web site 
                                       : browser
클라이언트가 서버에 서비스를 요청하는 순간 one page request 또는 visit to a Web site
서버상에는 무조건 Session이 만들어진다 - HttpSession
                                                              - jsessionID..117AD89172 등이 자동으로 만들어진다.
and to store information about that user : 사용자에 대한 정보를 저장한다 .. 서블릿이 수행해서 얻은 정보를 저장하는 Attribute 기능이 동작한다

Session은 요청할 때 서버가 알아서 만든다. 그걸 개발자가 받아서 쓰면 된다..
ServletRequest에는 없고 HttpServletRequest에는 getSession이 있다

클라이언트가 요청
- Login Servlet
1. 쿠키 생성 ---> 객체 저장 X
javax.servlet.http.Cookie [API]
Creates a cookie, a small amount of information
Cookie 생성자부터..
Cookie c = new Cookie("name", "value")
 --> value가 String이라는 점.. small amount of (객체를 value로 담지 못하게 막아놓았다는 것)
id = haba
pass = 0071
name = 하바리
address = 서현동
.. 객체 저장을 못하게 한 이유,, 하드웨어가 못 따라가니까

2. 쿠키를 브라우저로 보냄 ---> 보안 X
sent by a servlet to a Web browser, saved by the browser 
response.addCookie(Cookie cookie) - HttpServletResponse에만 존재 (ServletResponse에는 없음)
브라우저에 저장된 쿠키는 개수에 제한이 있다. 만료기한도 제한

3. 2번째 요청때 저장된 쿠키가 서버로 보내짐
Cookie[] cs = request.getCookies()
정보의 이동
c.getName() | c.getValue()

A cookie's value can uniquely identify a clinet,
so cookies are commonly used for session management
20 cookies for each Web Server : 웹브라우저별 20개
300 cookies total : 최대 300개
and may limit cookie size to 4 KB each : 각 사이즈는 4KB
브라우저에 저장된다..

- Cart Servlet

==============================================================
Cookie API
1. Session Management
2. 쇼핑몰 오늘본 상품정보 + 장바구니 (원래는 Session이었지만 이건 이제 NO!! Local Storage)

[HttpSession]
jsessionID는 들어오는 순간 숫자, 문자 조합으로 자동 만들어진다.
로그인하면 vo가 저장

Session이 만들어지면서 하나 더 만들어지는 게 Cookie
jsessionid가 그전 만들어진 jsessionid가 저장된다

상품 등록에서 쿠키 정보를 까봤을 때.. 
vo를 가져오고 상품 정보를 session에 저장한다

장바구니에서 vo, 상품 정보를 cookie를 통해 받을 수 있다

----> 로그인이 진행되는 동안 일어남 // 로그아웃은 session을 death

API : method..
getId, setAttribute, getAttribute
.. session을 death : invalidate
- 유효기간 지정 : setMaxInactiveInterval
- session이 만들어지는 시간 (최초의 요청 시간) : getCreationTime

==================================================

DataSource
Resource Factory
Connection Pool

DAO -- jdbc:mysql:ip:3306 -- DB
커넥션 하나 리턴 받는다.. 
커넥션 = DriverManager.getConnection(url, root, 1234)

Connection 리턴
1. DriverManager  방식 : java.sql
서비스 마다 커넥션 객체를 일일이 생성
2. DataSource 방식 : javsx.sql
A factory for connections to the physical data source
커넥션들을 위한 공장
(JNDI) API = Java Naming and Directory API

JNDI 서비스를 통해서 DataSource를 가져온다
JNDI는 Naming Service라고도 부른다

Resource Factory.. 에서 Resource는 Connection과 같은 말
Connection Factory와 같은 말이다
미리 만들어 놓은 Connection들을 가지고 있다
Connection들은 DB랑 연결되어 있다

아파치 사에서 만든 Resource Factory 가장 많이 사용한다
BasicDataSource (Apache사) ---> DataSource (Sun사)
이클립스 Data Source Explorer

Connection Pool
pooling이라는 것은 안에 똑같은게 들어있어서 어떤 걸 써도 상관없다
pooling 기법이라고 한다

close를 하지 않으면 다른 connection까지 렌트
DB 서버가 끊어지면서 포트가 끊어지는 일이 발생한다.

프레임워크.. 무조건 close를 한 걸 던져준다

DataSource 메서드
getConnection.. 인자값이 없다
Naming Service가 쓰인다

=== Naming Service
1. xml에다가 ResourceFactory 등록
   이름 = ResourceFactory <-- class
JNDI는 내부적으로 Hashtable로 만들어져있다
"jdbc/MySQL" : 주소값

2. Java CODE : javax.naming
(중요!) Context ic = new InitialContext();
네이밍 서비스를 위한 클래스
DataSource ds = ic.lookup("jdbc/MySQL"); --> 주소값이 객체를 찾아감! DataSource를 리턴해옴
