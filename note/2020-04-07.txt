* 어제 공부 정리
j2se / jsee
JDK > JRE(API) > JVM

CLIENT (서버에 있는 페이지 요청 : Request) / SERVER (요청을 처리한 결과를 돌려주는 것 : Response)
SE는 JVM에서 돌아간다면, EE는 Container(Server; WAS)에서 돌아간다.


앞으로 진행할 과정...커리큘럼
Java Programming - JDBC(MySQL)
- Front UI(HTML5, CSS3, JavaScript) - Web programming(Servlet, WAS, Design Pattern) - Ajax 
- Framework(MyBatis | Spring MVC) - Restful API(PostMan, Sweager) - Vue(CLI, SPC, VSCode)
	  |
	Maven, SpringBoot

	Maven Spring Framework + SpringBoot Rest api = Cross Domain

	BigData + AI + ELASTICSearch


* 오늘 내용
기본적인 문법 (변수, 조건문)

패키지 = 폴더, 디렉터리
패키지는 무조건 소문자로
패키지를 상위와 하위롤 구분짓는 건 .
클래스는 카멜표기법(Camel Case) - 첫 문자는 대문자로
입력 값에 따라 Output(결과)이 달라지는 것이 프로그래밍
이런 것을 동적인 Documentation
객체 클래스는 컴파일 대상이므로 실행 클래스(테스트 클래스)와 다름

.java : 사람이 보는 파일 (원시 코드 파일)
.class : 실행 파일

실행 파일은 저장할 때 (컴파일 될 때)
실행 시점은 main이 돌아갈 때
JVM : 실행(Interpreter) 되는 장소; Memory

EncoreGreet은 컴파일 대상 (main이 없기 때문에)

객체 생성은 결국 마지막은 주소값 할당

bin : 실행 및 삭제까지도 가지고 있는 디렉터리

C:\Program Files\Java\jdk1.8.0_201\bin 안에
javac.exe로 컴파일하고, java.exe로 실행되는 것!


javadoc.exe

Project - Generator
Javadoc Generation
command : C:\Program Files\Java\jdk1.8.0_201\bin\javadoc.exe
Destination : C:\kmg\eclipse\javaWorkspace\java02_OOP\doc

return 타입 지정 / return 타입이 없다면 void

OS랑 JDK - 종속적
JVM으로 인해 플랫폼 독립성(Independency)

실행파일이 돌아가는 환경 - 플랫폼 (JVM; HW+OS+JVM, OS+JVM 등 모두 플랫폼 - Vertical Platform)

JVM ( Heap - 메소드 주소값만 들어감, Stack, Method Area - 실제 동작원리는 여기에, literal(리터럴 풀..?))
자바 - 메모리 플러그인이 찰 일이 없으므로 가비지 컬렉터 할 필요도 없음

가비지 컬렉터 : Heap 영역만 청소


* Data Type
기본형(Promitive Data Type) : 8개 - 키워드이자 예약어(모두 소문자)
	숫자형
	  |
	  - 정수 byte(8bit) < short(16bit) < int(32bit) : default type < long(64bit)
	  - 실수 float(32bit) < double(64bit) : default type
	문자형 - char(16bit)(한 문자를 나타내는 데이타 타입) 'a', 'A', '나'/8bit
	논리형 - boolean(true/false)
	double salary = 4500000.0;
	float salary = 4500000.0F; //명시적 타입 지정 가능 : float, double, long
----------------------------------------------------------------------------------------
참조형(Class Data Type)


java.lang은 default : System.. String 등을 그냥 사용할 수 있었던 이유
나머지는 import 해야 한다. 예를 들어 Scanner의 java.util.Scanner

Ctrl + Shift + O : 모든 import를 한꺼번에 해결


객체(Field)라는 것은 무조건 값을 가지고 있어야 한다.
1. 묵시적 초기화 (정수 : 0, 실수 : 0.0, 문자 : /u0000, 논리형 : false, 클래스형(String) : null)
2. 주소값 할당
new EncoreGreet();
3. Stack 영역에 en 변수에 주소값 할당
4. 참조가 일어남

F2 : 클래스명 변경
F3 : 메소드 위치로 이동

.의 의미 : at
