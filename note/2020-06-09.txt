ServletContext
JSP

===================================================================

[API]
javax.servlet.ServletContext (인터페이스)
Defines a set of methods that a servlet uses to communicate with its servlet container,
There is one context per "web application" per Java Virtual Machine.
Use an external resource like a database instead - 데이터베이스 대신에 외부 자원을 사용하기에 적합
The ServletContext object is contained within the ServletConfig object

ServletContext
1. Attribute
(중요) 2. Container 차원에서의 초기화

메서드
- getContextPath
ContextPath까지 접근해서 사용할 때
- getInitParameter
ServletConfig에서 봤던.. web.xml에 설정하는 값.. init일 때 받아온다.
init은 서비스 인스턴스 생성되자마자 호출
- getResourceAsStream
InputStream 객체 리턴

==========================================================================================================
(getServletConfig,, hasing 관계)
Servlet ---- ServletConfig (getInitParamer.. web.xml 값을 끌어당긴다는 뜻, init에서) ---- ServletContext (setAttribute, getAttribute, getInitParameter)
   |             |
GenericServlet
    : init 오버로딩 (인자값 X)
    : service(req, res)  <-- hasing -- ServletRequest (Client -> Server // getParameter, getParameterValues, getParameterNames, getRequestDispatcher - forward
                                                                                             setAttribute, getAttribute..)
                                              ServletResponse
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 여기까지가 javax.servlet
    |
HttpServlet : doGet(hreq, hres), doPost(hreq, hres) <-- hasing -- HttpServletRequest (ServletRequest 상속, getSession)
                                                                                     HttpServletResponse (ServletResponse 상속, sendRedirect)
==================================================================================================== javax.servlet.http

1. D.D 파일 : Servlet 정보, Initialization (초기화) --> <init-param><param-name><param-value></init-param>
    --> ServletContext(Attribute)는 여기서 생성
2. DD파일에 매핑된 서블릿 생성 --> 기본 생성자 호출
3. ServletConfig 생성 : 서블릿 당 하나씩 생성
4. init 호출 (Servlet Initialization).. getInitParameter( DD파일에서 가져올 수 있는 내용)
<load-on-startup>.. 적어주지 않으면 최초 호출 때 만들어진다
----------------------------------------------------------------------------------------------------- Ready-on
클라이언트 request(요청) 
5. Request(Attribute), Response, Session(Attribute) 생성
6. doGet, doPost 호출
7. doGet, doPost 수행, 응답 --> 응답하면 Death
========================================================== Repeat (반복)

WAS에서 제일 먼저 만들어지는 객체는 ServletContext (얘가 더 Global)
두번째로 만들어지는 객체는 Servlet (서블릿 초기화 담당은 ServletConfig.. 개별적인 초기화)
DB연결은 요청이 들어오고 비지니스 로직이 호출될 때 일어나므로 취지가 맞지 않는다.. 이럴 때 필요한게 Global 초기화
ServletContext에서 vip 초기화는 setAttribute,, 서블릿이 받아가는 건 getAttribute --> 서버 가동되면서.. vip 값은 xml에서 끌어당긴다
Container 차원의 초기화는.. <context-param><param-name><param-value></context-param>
vip 멤버에 대한 정보가 파일에 들어 있다면.. 파일 경로만 써주면 된다. (ServletConfig는 상대경로가 먹히지 않는다. 사용할 것 같으면 절대경로)
<context-param>
param-name : VipFile
param-value : 파일경로 (상대경로 가능)
</context-param>
파일경로 = context.getInitParameter("vipFile") <-- 이부분이 앞서 API에서 extra resource 관련 부분
----------------- 메소드?  init, service, 생성자.. init은 a servlet initialization // 생성자가 먼저 돌아감 (단 생성자보다 먼저 만들어짐)
                                ServletContext는 Servlet과 관련 없음.. container 차원에서는 그 어떤 메서드보다 더 먼저 생성.. 핸들링이 되지 않는다
                    ---> 이벤트로 처리 : ServletContext에서 제공하는 getInitParameter 를 사용하여 Extra Resource를 할당
                                               ServletContext에 할당되는 것 자체를 사건으로 치부.. 이벤트라고 함
                                               ServletContextEvent로 다 만들어놓음.. 사건을 감지하는 감시자가 ServletContextListener
                           감지자가 만들어지고 이벤트..
	 	  1. ServletContextListener (context initialization, context destroy..?) : 메서드 2개,, ServletContextEvent 파싱
		  2. ServletContextEvent

===================================================================================================================

Servlet 역할 (Controller 역할) 
1. 폼 값 받는다
(2). VO 생성
3. DAO 리턴
(중요) 4. BIZ -> 리턴값
5. 바인딩 -- Attribute (단순조회 : request, 로그인 상태 : session, 글로벌 초기화 : servlet context,, 거의 쓸 일이 없음)
6. 네비게이션

JSP (Tag 중심 -> 화면)
<% 
   Attribute에서 받아와야한다
%>
java Code X
request.getAttribute() ---> EL
request.getAttribute("vo") : 객체 리턴
---> vo : 변수명 X, 연결된 String 이름
session. application도 Attribute

===========================

set은 변수가 아니라 attribute.. 이 페이지에 값을 바인딩하는 것


